{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4","program":"C:\\Users\\prana\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","lock_api","--edition=2018","C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=aabd16bd10139081","-C","extra-filename=-aabd16bd10139081","--out-dir","d:\\prana\\Programming\\My Projects\\novus-package-manager\\novus-packages\\target\\rls\\debug\\deps","-L","dependency=d:\\prana\\Programming\\My Projects\\novus-package-manager\\novus-packages\\target\\rls\\debug\\deps","--extern","scopeguard=d:\\prana\\Programming\\My Projects\\novus-package-manager\\novus-packages\\target\\rls\\debug\\deps\\libscopeguard-a945872618ad9489.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\prana\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\prana\\Programming\\My Projects\\novus-package-manager\\novus-packages\\target\\rls\\debug\\deps\\liblock_api-aabd16bd10139081.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[15484776610555560225,15771875980741458219]},"crate_root":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src","external_crates":[{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14223085168939843507,9453778982390123811]}},{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10495964697894269666,7444397110794681726]}},{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5630579929119936438,10747952327389013202]}},{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[429372990002042441,15390206183276144831]}}],"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":333,"byte_end":4089,"line_start":8,"line_end":111,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":4007,"byte_end":4008,"line_start":105,"line_end":105,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":4048,"byte_end":4049,"line_start":108,"line_end":108,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":4087,"byte_end":4088,"line_start":111,"line_end":111,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":333,"byte_end":4089,"line_start":8,"line_end":111,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":875}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/             .is_ok()","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     unsafe fn unlock(&self) {","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2241,"byte_end":2274,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2275,"byte_end":2326,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2327,"byte_end":2336,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2337,"byte_end":2342,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2343,"byte_end":2346,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2347,"byte_end":2431,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2432,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2492,"byte_end":2569,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2570,"byte_end":2577,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2578,"byte_end":2581,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2582,"byte_end":2604,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2605,"byte_end":2608,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2609,"byte_end":2688,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2689,"byte_end":2764,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2765,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2839,"byte_end":2893,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2894,"byte_end":2949,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":2950,"byte_end":3006,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3007,"byte_end":3056,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3057,"byte_end":3105,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3106,"byte_end":3109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3110,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3190,"byte_end":3263,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3264,"byte_end":3267,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3268,"byte_end":3288,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3289,"byte_end":3292,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This crate supports two cargo features:","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3293,"byte_end":3336,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3337,"byte_end":3340,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3341,"byte_end":3423,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3424,"byte_end":3499,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3500,"byte_end":3556,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3558,"byte_end":3568,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3569,"byte_end":3591,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3592,"byte_end":3618,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3809,"byte_end":3818,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3724,"byte_end":3797,"line_start":96,"line_end":96,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3914,"byte_end":3925,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3825,"byte_end":3902,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5035,"byte_end":5043,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4701,"byte_end":4734,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4735,"byte_end":4738,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4739,"byte_end":4814,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4815,"byte_end":4848,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4849,"byte_end":4852,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4853,"byte_end":4865,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4866,"byte_end":4869,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4870,"byte_end":4942,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":4943,"byte_end":5017,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5346,"byte_end":5350,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5050,"byte_end":5090,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5287,"byte_end":5335,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5515,"byte_end":5526,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5363,"byte_end":5438,"line_start":36,"line_end":36,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5443,"byte_end":5505,"line_start":37,"line_end":37,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5620,"byte_end":5624,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5533,"byte_end":5612,"line_start":40,"line_end":40,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5782,"byte_end":5790,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5638,"byte_end":5705,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5710,"byte_end":5774,"line_start":44,"line_end":44,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6320,"byte_end":6326,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub unsafe fn unlock(&Self)","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5812,"byte_end":5835,"line_start":47,"line_end":47,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5840,"byte_end":5843,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5848,"byte_end":5860,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5865,"byte_end":5868,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, i.e. it must","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5873,"byte_end":5965,"line_start":51,"line_end":51,"column_start":5,"column_end":97}},{"value":"/ be paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":5970,"byte_end":6073,"line_start":52,"line_end":52,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6078,"byte_end":6081,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ [`lock`]: #tymethod.lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6086,"byte_end":6114,"line_start":54,"line_end":54,"column_start":5,"column_end":33}},{"value":"/ [`try_lock`]: #tymethod.try_lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6119,"byte_end":6155,"line_start":55,"line_end":55,"column_start":5,"column_end":41}},{"value":"/ [`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6160,"byte_end":6228,"line_start":56,"line_end":56,"column_start":5,"column_end":73}},{"value":"/ [`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6233,"byte_end":6305,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6411,"byte_end":6420,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6340,"byte_end":6389,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6394,"byte_end":6403,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7068,"byte_end":7080,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6688,"byte_end":6752,"line_start":74,"line_end":74,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6753,"byte_end":6756,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6757,"byte_end":6837,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6838,"byte_end":6913,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6914,"byte_end":6988,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":6989,"byte_end":7050,"line_start":79,"line_end":79,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7390,"byte_end":7401,"line_start":89,"line_end":89,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7097,"byte_end":7149,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7154,"byte_end":7157,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7162,"byte_end":7174,"line_start":83,"line_end":83,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7179,"byte_end":7182,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7187,"byte_end":7270,"line_start":85,"line_end":85,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7275,"byte_end":7311,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7316,"byte_end":7319,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7324,"byte_end":7375,"line_start":88,"line_end":88,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7927,"byte_end":7931,"line_start":103,"line_end":103,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub unsafe fn bump(&Self)","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7415,"byte_end":7484,"line_start":91,"line_end":91,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7489,"byte_end":7492,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7497,"byte_end":7573,"line_start":93,"line_end":93,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7578,"byte_end":7654,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7659,"byte_end":7686,"line_start":95,"line_end":95,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7691,"byte_end":7694,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7699,"byte_end":7711,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7716,"byte_end":7719,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7724,"byte_end":7807,"line_start":99,"line_end":99,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7812,"byte_end":7848,"line_start":100,"line_end":100,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7853,"byte_end":7856,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7861,"byte_end":7912,"line_start":102,"line_end":102,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8229,"byte_end":8242,"line_start":113,"line_end":113,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7999,"byte_end":8070,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8071,"byte_end":8074,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8075,"byte_end":8155,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8156,"byte_end":8211,"line_start":112,"line_end":112,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8311,"byte_end":8319,"line_start":115,"line_end":115,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8259,"byte_end":8301,"line_start":114,"line_end":114,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8379,"byte_end":8386,"line_start":118,"line_end":118,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8326,"byte_end":8369,"line_start":117,"line_end":117,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8462,"byte_end":8474,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8393,"byte_end":8454,"line_start":120,"line_end":120,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8590,"byte_end":8604,"line_start":124,"line_end":124,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8521,"byte_end":8582,"line_start":123,"line_end":123,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9158,"byte_end":9163,"line_start":135,"line_end":135,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8648,"byte_end":8714,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8715,"byte_end":8718,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8719,"byte_end":8798,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8799,"byte_end":8866,"line_start":130,"line_end":130,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8867,"byte_end":8946,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8947,"byte_end":9022,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9023,"byte_end":9102,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9103,"byte_end":9146,"line_start":134,"line_end":134,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9785,"byte_end":9788,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9663,"byte_end":9722,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9727,"byte_end":9759,"line_start":155,"line_end":155,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9764,"byte_end":9773,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9998,"byte_end":10008,"line_start":166,"line_end":166,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9917,"byte_end":9972,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9977,"byte_end":9986,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10264,"byte_end":10273,"line_start":176,"line_end":176,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10091,"byte_end":10149,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10154,"byte_end":10157,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10162,"byte_end":10232,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10237,"byte_end":10246,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11245,"byte_end":11249,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10707,"byte_end":10783,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10788,"byte_end":10791,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10796,"byte_end":10874,"line_start":198,"line_end":198,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10879,"byte_end":10954,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10959,"byte_end":11035,"line_start":200,"line_end":200,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11040,"byte_end":11100,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11105,"byte_end":11108,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11113,"byte_end":11189,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11194,"byte_end":11219,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11224,"byte_end":11233,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11703,"byte_end":11711,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11401,"byte_end":11435,"line_start":212,"line_end":212,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11440,"byte_end":11443,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11448,"byte_end":11524,"line_start":214,"line_end":214,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11529,"byte_end":11605,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11610,"byte_end":11631,"line_start":216,"line_end":216,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11636,"byte_end":11639,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11644,"byte_end":11677,"line_start":218,"line_end":218,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11682,"byte_end":11691,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12184,"byte_end":12191,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11937,"byte_end":11992,"line_start":229,"line_end":229,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":11997,"byte_end":12000,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12005,"byte_end":12080,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12085,"byte_end":12158,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12163,"byte_end":12172,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12342,"byte_end":12351,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12267,"byte_end":12316,"line_start":238,"line_end":238,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12321,"byte_end":12330,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12917,"byte_end":12929,"line_start":256,"line_end":256,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12409,"byte_end":12440,"line_start":244,"line_end":244,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12445,"byte_end":12448,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12453,"byte_end":12527,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12532,"byte_end":12602,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12607,"byte_end":12628,"line_start":248,"line_end":248,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12633,"byte_end":12636,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12641,"byte_end":12653,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12658,"byte_end":12661,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12666,"byte_end":12740,"line_start":252,"line_end":252,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12745,"byte_end":12814,"line_start":253,"line_end":253,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12819,"byte_end":12884,"line_start":254,"line_end":254,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12889,"byte_end":12898,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13366,"byte_end":13369,"line_start":270,"line_end":270,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":12977,"byte_end":13021,"line_start":260,"line_end":260,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13026,"byte_end":13029,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13034,"byte_end":13109,"line_start":262,"line_end":262,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13114,"byte_end":13175,"line_start":263,"line_end":263,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13180,"byte_end":13183,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13188,"byte_end":13200,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13205,"byte_end":13208,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13213,"byte_end":13280,"line_start":267,"line_end":267,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13285,"byte_end":13333,"line_start":268,"line_end":268,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13338,"byte_end":13347,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13939,"byte_end":13947,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13414,"byte_end":13463,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13468,"byte_end":13471,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13476,"byte_end":13550,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13555,"byte_end":13625,"line_start":277,"line_end":277,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13630,"byte_end":13651,"line_start":278,"line_end":278,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13656,"byte_end":13659,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13664,"byte_end":13676,"line_start":280,"line_end":280,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13681,"byte_end":13684,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13689,"byte_end":13760,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13765,"byte_end":13835,"line_start":283,"line_end":283,"column_start":5,"column_end":75}},{"value":"/ a `MutexGuard` but that guard has been discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13840,"byte_end":13913,"line_start":284,"line_end":284,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":13918,"byte_end":13927,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14588,"byte_end":14605,"line_start":304,"line_end":304,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14051,"byte_end":14111,"line_start":292,"line_end":292,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14116,"byte_end":14119,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14124,"byte_end":14198,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14203,"byte_end":14273,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14278,"byte_end":14299,"line_start":296,"line_end":296,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14304,"byte_end":14307,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14312,"byte_end":14324,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14329,"byte_end":14332,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14337,"byte_end":14411,"line_start":300,"line_end":300,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14416,"byte_end":14485,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14490,"byte_end":14555,"line_start":302,"line_end":302,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14560,"byte_end":14569,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15005,"byte_end":15017,"line_start":316,"line_end":316,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14708,"byte_end":14769,"line_start":310,"line_end":310,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14774,"byte_end":14777,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14782,"byte_end":14852,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14857,"byte_end":14932,"line_start":313,"line_end":313,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14937,"byte_end":14979,"line_start":314,"line_end":314,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14984,"byte_end":14993,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15573,"byte_end":15587,"line_start":331,"line_end":331,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15276,"byte_end":15337,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15342,"byte_end":15345,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15350,"byte_end":15420,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15425,"byte_end":15500,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15505,"byte_end":15547,"line_start":329,"line_end":329,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15552,"byte_end":15561,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17795,"byte_end":17805,"line_start":410,"line_end":410,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17455,"byte_end":17535,"line_start":404,"line_end":404,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17536,"byte_end":17596,"line_start":405,"line_end":405,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17597,"byte_end":17600,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17601,"byte_end":17679,"line_start":407,"line_end":407,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17680,"byte_end":17723,"line_start":408,"line_end":408,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17724,"byte_end":17783,"line_start":409,"line_end":409,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18156,"byte_end":18161,"line_start":419,"line_end":419,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18089,"byte_end":18144,"line_start":418,"line_end":418,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18626,"byte_end":18629,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18220,"byte_end":18290,"line_start":423,"line_end":423,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18295,"byte_end":18298,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18303,"byte_end":18360,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18365,"byte_end":18397,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18402,"byte_end":18405,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18410,"byte_end":18461,"line_start":428,"line_end":428,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18466,"byte_end":18542,"line_start":429,"line_end":429,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18547,"byte_end":18600,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18605,"byte_end":18614,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19464,"byte_end":19471,"line_start":456,"line_end":456,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18973,"byte_end":19041,"line_start":446,"line_end":446,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19046,"byte_end":19124,"line_start":447,"line_end":447,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19129,"byte_end":19132,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19137,"byte_end":19194,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19199,"byte_end":19231,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19236,"byte_end":19239,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19244,"byte_end":19295,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19300,"byte_end":19380,"line_start":453,"line_end":453,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19385,"byte_end":19438,"line_start":454,"line_end":454,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19443,"byte_end":19452,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20152,"byte_end":20160,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19926,"byte_end":19990,"line_start":473,"line_end":473,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":19995,"byte_end":19998,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20003,"byte_end":20071,"line_start":475,"line_end":475,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20076,"byte_end":20126,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20131,"byte_end":20140,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21262,"byte_end":21273,"line_start":505,"line_end":505,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20481,"byte_end":20532,"line_start":492,"line_end":492,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20537,"byte_end":20540,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20545,"byte_end":20619,"line_start":494,"line_end":494,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20624,"byte_end":20696,"line_start":495,"line_end":495,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20701,"byte_end":20775,"line_start":496,"line_end":496,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20780,"byte_end":20855,"line_start":497,"line_end":497,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20860,"byte_end":20931,"line_start":498,"line_end":498,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20936,"byte_end":20993,"line_start":499,"line_end":499,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20998,"byte_end":21001,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21006,"byte_end":21082,"line_start":501,"line_end":501,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21087,"byte_end":21163,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21168,"byte_end":21236,"line_start":503,"line_end":503,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21241,"byte_end":21250,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21735,"byte_end":21748,"line_start":520,"line_end":520,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21441,"byte_end":21505,"line_start":513,"line_end":513,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21510,"byte_end":21513,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21518,"byte_end":21573,"line_start":515,"line_end":515,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21578,"byte_end":21581,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21586,"byte_end":21654,"line_start":517,"line_end":517,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21659,"byte_end":21709,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":21714,"byte_end":21723,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22299,"byte_end":22303,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22002,"byte_end":22071,"line_start":532,"line_end":532,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22076,"byte_end":22079,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22084,"byte_end":22160,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22165,"byte_end":22241,"line_start":535,"line_end":535,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22246,"byte_end":22273,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22278,"byte_end":22287,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24021,"byte_end":24037,"line_start":594,"line_end":594,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23585,"byte_end":23660,"line_start":586,"line_end":586,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23661,"byte_end":23696,"line_start":587,"line_end":587,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23697,"byte_end":23700,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23701,"byte_end":23780,"line_start":589,"line_end":589,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23781,"byte_end":23856,"line_start":590,"line_end":590,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23857,"byte_end":23937,"line_start":591,"line_end":591,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23938,"byte_end":23949,"line_start":592,"line_end":592,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23950,"byte_end":24009,"line_start":593,"line_end":593,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24872,"byte_end":24875,"line_start":619,"line_end":619,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24454,"byte_end":24524,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24529,"byte_end":24532,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24537,"byte_end":24600,"line_start":612,"line_end":612,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24605,"byte_end":24637,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24642,"byte_end":24645,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24650,"byte_end":24701,"line_start":615,"line_end":615,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24706,"byte_end":24788,"line_start":616,"line_end":616,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24793,"byte_end":24846,"line_start":617,"line_end":617,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24851,"byte_end":24860,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25703,"byte_end":25710,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25200,"byte_end":25268,"line_start":633,"line_end":633,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25273,"byte_end":25351,"line_start":634,"line_end":634,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25356,"byte_end":25359,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25364,"byte_end":25427,"line_start":636,"line_end":636,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25432,"byte_end":25464,"line_start":637,"line_end":637,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25469,"byte_end":25472,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25477,"byte_end":25528,"line_start":639,"line_end":639,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25533,"byte_end":25619,"line_start":640,"line_end":640,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25624,"byte_end":25677,"line_start":641,"line_end":641,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":25682,"byte_end":25691,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27005,"byte_end":27016,"line_start":675,"line_end":675,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26224,"byte_end":26275,"line_start":662,"line_end":662,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26280,"byte_end":26283,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26288,"byte_end":26362,"line_start":664,"line_end":664,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26367,"byte_end":26439,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26444,"byte_end":26518,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26523,"byte_end":26598,"line_start":667,"line_end":667,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26603,"byte_end":26674,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26679,"byte_end":26736,"line_start":669,"line_end":669,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26741,"byte_end":26744,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26749,"byte_end":26825,"line_start":671,"line_end":671,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26830,"byte_end":26906,"line_start":672,"line_end":672,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26911,"byte_end":26979,"line_start":673,"line_end":673,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26984,"byte_end":26993,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29477,"byte_end":29488,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29076,"byte_end":29128,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29129,"byte_end":29132,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29133,"byte_end":29207,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29208,"byte_end":29234,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29235,"byte_end":29238,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29239,"byte_end":29251,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29252,"byte_end":29255,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29256,"byte_end":29334,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29335,"byte_end":29408,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29409,"byte_end":29459,"line_start":37,"line_end":37,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29769,"byte_end":29773,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29495,"byte_end":29513,"line_start":39,"line_end":39,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29710,"byte_end":29758,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29884,"byte_end":29901,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29786,"byte_end":29857,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29862,"byte_end":29876,"line_start":46,"line_end":46,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30469,"byte_end":30486,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[{"value":"/ A raw mutex type that wraps another raw mutex to provide reentrancy.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":29929,"byte_end":30001,"line_start":50,"line_end":50,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30002,"byte_end":30005,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Although this has the same methods as the [`RawMutex`] trait, it does","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30006,"byte_end":30079,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ not implement it, and should not be used in the same way, since this","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30080,"byte_end":30152,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ mutex can successfully acquire a lock multiple times in the same thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30153,"byte_end":30229,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ Only use this when you know you want a raw mutex that can be locked","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30230,"byte_end":30301,"line_start":55,"line_end":55,"column_start":1,"column_end":72}},{"value":"/ reentrantly; you probably want [`ReentrantMutex`] instead.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30302,"byte_end":30364,"line_start":56,"line_end":56,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30365,"byte_end":30368,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ [`RawMutex`]: trait.RawMutex.html","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30369,"byte_end":30406,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/ [`ReentrantMutex`]: struct.ReentrantMutex.html","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30407,"byte_end":30457,"line_start":59,"line_end":59,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30942,"byte_end":30946,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30834,"byte_end":30874,"line_start":71,"line_end":71,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30879,"byte_end":30927,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":31882,"byte_end":31886,"line_start":103,"line_end":103,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"pub fn lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking if it's held by another thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":31791,"byte_end":31856,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":31861,"byte_end":31870,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32161,"byte_end":32169,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":31999,"byte_end":32066,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32071,"byte_end":32135,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32140,"byte_end":32149,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32528,"byte_end":32534,"line_start":124,"line_end":124,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"pub unsafe fn unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex. The inner mutex may not be unlocked if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32251,"byte_end":32313,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"/ this mutex was acquired previously in the current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32318,"byte_end":32379,"line_start":118,"line_end":118,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32384,"byte_end":32387,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32392,"byte_end":32404,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32409,"byte_end":32412,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32417,"byte_end":32495,"line_start":122,"line_end":122,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32500,"byte_end":32509,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32847,"byte_end":32856,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32772,"byte_end":32821,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32826,"byte_end":32835,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33011,"byte_end":33037,"line_start":141,"line_end":141,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<RawReentrantMutex<R, G>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32916,"byte_end":32985,"line_start":139,"line_end":139,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":32990,"byte_end":32999,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33558,"byte_end":33569,"line_start":156,"line_end":156,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol. The inner mutex","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33244,"byte_end":33312,"line_start":148,"line_end":148,"column_start":5,"column_end":73}},{"value":"/ may not be unlocked if this mutex was acquired previously in the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33317,"byte_end":33385,"line_start":149,"line_end":149,"column_start":5,"column_end":73}},{"value":"/ current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33390,"byte_end":33409,"line_start":150,"line_end":150,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33414,"byte_end":33417,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33422,"byte_end":33434,"line_start":152,"line_end":152,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33439,"byte_end":33442,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33447,"byte_end":33525,"line_start":154,"line_end":154,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33530,"byte_end":33539,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34232,"byte_end":34236,"line_start":175,"line_end":175,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"pub unsafe fn bump(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33812,"byte_end":33881,"line_start":165,"line_end":165,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33886,"byte_end":33889,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33894,"byte_end":33970,"line_start":167,"line_end":167,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33975,"byte_end":34051,"line_start":168,"line_end":168,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34056,"byte_end":34083,"line_start":169,"line_end":169,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34088,"byte_end":34091,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34096,"byte_end":34108,"line_start":171,"line_end":171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34113,"byte_end":34116,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34121,"byte_end":34199,"line_start":173,"line_end":173,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34204,"byte_end":34213,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34654,"byte_end":34668,"line_start":188,"line_end":188,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34567,"byte_end":34628,"line_start":186,"line_end":186,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34633,"byte_end":34642,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34871,"byte_end":34883,"line_start":194,"line_end":194,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34784,"byte_end":34845,"line_start":192,"line_end":192,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34850,"byte_end":34859,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35471,"byte_end":35485,"line_start":210,"line_end":210,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34996,"byte_end":35059,"line_start":199,"line_end":199,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35060,"byte_end":35063,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35064,"byte_end":35134,"line_start":201,"line_end":201,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35135,"byte_end":35138,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35139,"byte_end":35219,"line_start":203,"line_end":203,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35220,"byte_end":35238,"line_start":204,"line_end":204,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35239,"byte_end":35319,"line_start":205,"line_end":205,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35320,"byte_end":35359,"line_start":206,"line_end":206,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35360,"byte_end":35363,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35364,"byte_end":35444,"line_start":208,"line_end":208,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35445,"byte_end":35459,"line_start":209,"line_end":209,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36465,"byte_end":36468,"line_start":243,"line_end":243,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36333,"byte_end":36402,"line_start":240,"line_end":240,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36407,"byte_end":36439,"line_start":241,"line_end":241,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36444,"byte_end":36453,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36883,"byte_end":36893,"line_start":257,"line_end":257,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36802,"byte_end":36857,"line_start":255,"line_end":255,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36862,"byte_end":36871,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37234,"byte_end":37243,"line_start":269,"line_end":269,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36991,"byte_end":37064,"line_start":263,"line_end":263,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37069,"byte_end":37101,"line_start":264,"line_end":264,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37106,"byte_end":37109,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37114,"byte_end":37188,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37193,"byte_end":37202,"line_start":267,"line_end":267,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37207,"byte_end":37216,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38582,"byte_end":38586,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37943,"byte_end":38019,"line_start":294,"line_end":294,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38024,"byte_end":38037,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38042,"byte_end":38045,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38050,"byte_end":38126,"line_start":297,"line_end":297,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38131,"byte_end":38207,"line_start":298,"line_end":298,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38212,"byte_end":38288,"line_start":299,"line_end":299,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38293,"byte_end":38357,"line_start":300,"line_end":300,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38362,"byte_end":38433,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38438,"byte_end":38513,"line_start":302,"line_end":302,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38518,"byte_end":38556,"line_start":303,"line_end":303,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38561,"byte_end":38570,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39052,"byte_end":39060,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38750,"byte_end":38784,"line_start":311,"line_end":311,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38789,"byte_end":38792,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38797,"byte_end":38873,"line_start":313,"line_end":313,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38878,"byte_end":38954,"line_start":314,"line_end":314,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38959,"byte_end":38980,"line_start":315,"line_end":315,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38985,"byte_end":38988,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":38993,"byte_end":39026,"line_start":317,"line_end":317,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39031,"byte_end":39040,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39554,"byte_end":39561,"line_start":333,"line_end":333,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39298,"byte_end":39353,"line_start":328,"line_end":328,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39358,"byte_end":39361,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39366,"byte_end":39450,"line_start":330,"line_end":330,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39455,"byte_end":39528,"line_start":331,"line_end":331,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39533,"byte_end":39542,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39712,"byte_end":39721,"line_start":339,"line_end":339,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39637,"byte_end":39686,"line_start":337,"line_end":337,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39691,"byte_end":39700,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39874,"byte_end":39900,"line_start":345,"line_end":345,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<ReentrantMutex<R, G, T>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39779,"byte_end":39848,"line_start":343,"line_end":343,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39853,"byte_end":39862,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40501,"byte_end":40513,"line_start":361,"line_end":361,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":39975,"byte_end":40006,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40011,"byte_end":40014,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40019,"byte_end":40093,"line_start":351,"line_end":351,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40098,"byte_end":40177,"line_start":352,"line_end":352,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40182,"byte_end":40203,"line_start":353,"line_end":353,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40208,"byte_end":40211,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40216,"byte_end":40228,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40233,"byte_end":40236,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40241,"byte_end":40315,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40320,"byte_end":40398,"line_start":358,"line_end":358,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40403,"byte_end":40468,"line_start":359,"line_end":359,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40473,"byte_end":40482,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40959,"byte_end":40962,"line_start":375,"line_end":375,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40561,"byte_end":40605,"line_start":365,"line_end":365,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40610,"byte_end":40613,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40618,"byte_end":40693,"line_start":367,"line_end":367,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40698,"byte_end":40759,"line_start":368,"line_end":368,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40764,"byte_end":40767,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40772,"byte_end":40784,"line_start":370,"line_end":370,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40789,"byte_end":40792,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40797,"byte_end":40864,"line_start":372,"line_end":372,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40869,"byte_end":40926,"line_start":373,"line_end":373,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":40931,"byte_end":40940,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41564,"byte_end":41572,"line_start":392,"line_end":392,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41013,"byte_end":41062,"line_start":379,"line_end":379,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41067,"byte_end":41070,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41075,"byte_end":41149,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41154,"byte_end":41228,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"/ when dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41233,"byte_end":41259,"line_start":383,"line_end":383,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41264,"byte_end":41267,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41272,"byte_end":41284,"line_start":385,"line_end":385,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41289,"byte_end":41292,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41297,"byte_end":41368,"line_start":387,"line_end":387,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41373,"byte_end":41445,"line_start":388,"line_end":388,"column_start":5,"column_end":77}},{"value":"/ `ReentrantMutexGuard` but that guard has been discarded using","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41450,"byte_end":41515,"line_start":389,"line_end":389,"column_start":5,"column_end":70}},{"value":"/ `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41520,"byte_end":41538,"line_start":390,"line_end":390,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41543,"byte_end":41552,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42259,"byte_end":42276,"line_start":410,"line_end":410,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41704,"byte_end":41764,"line_start":398,"line_end":398,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41769,"byte_end":41772,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41777,"byte_end":41851,"line_start":400,"line_end":400,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41856,"byte_end":41935,"line_start":401,"line_end":401,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41940,"byte_end":41961,"line_start":402,"line_end":402,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41966,"byte_end":41969,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41974,"byte_end":41986,"line_start":404,"line_end":404,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41991,"byte_end":41994,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41999,"byte_end":42073,"line_start":406,"line_end":406,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42078,"byte_end":42156,"line_start":407,"line_end":407,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42161,"byte_end":42226,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42231,"byte_end":42240,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42704,"byte_end":42716,"line_start":422,"line_end":422,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42407,"byte_end":42468,"line_start":416,"line_end":416,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42473,"byte_end":42476,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42481,"byte_end":42551,"line_start":418,"line_end":418,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42556,"byte_end":42631,"line_start":419,"line_end":419,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42636,"byte_end":42678,"line_start":420,"line_end":420,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42683,"byte_end":42692,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43284,"byte_end":43298,"line_start":437,"line_end":437,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42987,"byte_end":43048,"line_start":431,"line_end":431,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43053,"byte_end":43056,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43061,"byte_end":43131,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43136,"byte_end":43211,"line_start":434,"line_end":434,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43216,"byte_end":43258,"line_start":435,"line_end":435,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43263,"byte_end":43272,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45795,"byte_end":45814,"line_start":521,"line_end":521,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45452,"byte_end":45539,"line_start":515,"line_end":515,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45540,"byte_end":45603,"line_start":516,"line_end":516,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45604,"byte_end":45607,"line_start":517,"line_end":517,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45608,"byte_end":45686,"line_start":518,"line_end":518,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45687,"byte_end":45714,"line_start":519,"line_end":519,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":45715,"byte_end":45783,"line_start":520,"line_end":520,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46275,"byte_end":46282,"line_start":533,"line_end":533,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46199,"byte_end":46263,"line_start":532,"line_end":532,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46788,"byte_end":46791,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46355,"byte_end":46434,"line_start":537,"line_end":537,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46439,"byte_end":46442,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46447,"byte_end":46513,"line_start":539,"line_end":539,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46518,"byte_end":46550,"line_start":540,"line_end":540,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46555,"byte_end":46558,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46563,"byte_end":46614,"line_start":542,"line_end":542,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46619,"byte_end":46704,"line_start":543,"line_end":543,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46709,"byte_end":46762,"line_start":544,"line_end":544,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46767,"byte_end":46776,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47661,"byte_end":47668,"line_start":570,"line_end":570,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47148,"byte_end":47226,"line_start":560,"line_end":560,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47231,"byte_end":47307,"line_start":561,"line_end":561,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47312,"byte_end":47315,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47320,"byte_end":47386,"line_start":563,"line_end":563,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47391,"byte_end":47423,"line_start":564,"line_end":564,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47428,"byte_end":47431,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47436,"byte_end":47487,"line_start":566,"line_end":566,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47492,"byte_end":47577,"line_start":567,"line_end":567,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47582,"byte_end":47635,"line_start":568,"line_end":568,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":47640,"byte_end":47649,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48397,"byte_end":48405,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48171,"byte_end":48235,"line_start":590,"line_end":590,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48240,"byte_end":48243,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48248,"byte_end":48316,"line_start":592,"line_end":592,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48321,"byte_end":48371,"line_start":593,"line_end":593,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48376,"byte_end":48385,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49566,"byte_end":49577,"line_start":624,"line_end":624,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48776,"byte_end":48827,"line_start":611,"line_end":611,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48832,"byte_end":48835,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48840,"byte_end":48914,"line_start":613,"line_end":613,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48919,"byte_end":48991,"line_start":614,"line_end":614,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48996,"byte_end":49070,"line_start":615,"line_end":615,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49075,"byte_end":49150,"line_start":616,"line_end":616,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49155,"byte_end":49226,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49231,"byte_end":49288,"line_start":618,"line_end":618,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49293,"byte_end":49296,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49301,"byte_end":49377,"line_start":620,"line_end":620,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49382,"byte_end":49458,"line_start":621,"line_end":621,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49463,"byte_end":49540,"line_start":622,"line_end":622,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49545,"byte_end":49554,"line_start":623,"line_end":623,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50043,"byte_end":50056,"line_start":639,"line_end":639,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49755,"byte_end":49819,"line_start":632,"line_end":632,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49824,"byte_end":49827,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49832,"byte_end":49881,"line_start":634,"line_end":634,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49886,"byte_end":49889,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49894,"byte_end":49962,"line_start":636,"line_end":636,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":49967,"byte_end":50017,"line_start":637,"line_end":637,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50022,"byte_end":50031,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50619,"byte_end":50623,"line_start":657,"line_end":657,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50322,"byte_end":50391,"line_start":651,"line_end":651,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50396,"byte_end":50399,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50404,"byte_end":50480,"line_start":653,"line_end":653,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50485,"byte_end":50561,"line_start":654,"line_end":654,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50566,"byte_end":50593,"line_start":655,"line_end":655,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50598,"byte_end":50607,"line_start":656,"line_end":656,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52397,"byte_end":52422,"line_start":717,"line_end":717,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51925,"byte_end":52009,"line_start":709,"line_end":709,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52010,"byte_end":52045,"line_start":710,"line_end":710,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52046,"byte_end":52049,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52050,"byte_end":52147,"line_start":712,"line_end":712,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52148,"byte_end":52223,"line_start":713,"line_end":713,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52224,"byte_end":52304,"line_start":714,"line_end":714,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52305,"byte_end":52316,"line_start":715,"line_end":715,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52317,"byte_end":52385,"line_start":716,"line_end":716,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53269,"byte_end":53272,"line_start":740,"line_end":740,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52824,"byte_end":52903,"line_start":731,"line_end":731,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52908,"byte_end":52911,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52916,"byte_end":52988,"line_start":733,"line_end":733,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52993,"byte_end":53025,"line_start":734,"line_end":734,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53030,"byte_end":53033,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53038,"byte_end":53089,"line_start":736,"line_end":736,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53094,"byte_end":53185,"line_start":737,"line_end":737,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53190,"byte_end":53243,"line_start":738,"line_end":738,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53248,"byte_end":53257,"line_start":739,"line_end":739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54131,"byte_end":54138,"line_start":764,"line_end":764,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53606,"byte_end":53684,"line_start":754,"line_end":754,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53689,"byte_end":53765,"line_start":755,"line_end":755,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53770,"byte_end":53773,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53778,"byte_end":53850,"line_start":757,"line_end":757,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53855,"byte_end":53887,"line_start":758,"line_end":758,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53892,"byte_end":53895,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53900,"byte_end":53951,"line_start":760,"line_end":760,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":53956,"byte_end":54047,"line_start":761,"line_end":761,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54052,"byte_end":54105,"line_start":762,"line_end":762,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54110,"byte_end":54119,"line_start":763,"line_end":763,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55511,"byte_end":55522,"line_start":801,"line_end":801,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54721,"byte_end":54772,"line_start":788,"line_end":788,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54777,"byte_end":54780,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54785,"byte_end":54859,"line_start":790,"line_end":790,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54864,"byte_end":54936,"line_start":791,"line_end":791,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54941,"byte_end":55015,"line_start":792,"line_end":792,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55020,"byte_end":55095,"line_start":793,"line_end":793,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55100,"byte_end":55171,"line_start":794,"line_end":794,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55176,"byte_end":55233,"line_start":795,"line_end":795,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55238,"byte_end":55241,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55246,"byte_end":55322,"line_start":797,"line_end":797,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55327,"byte_end":55403,"line_start":798,"line_end":798,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55408,"byte_end":55485,"line_start":799,"line_end":799,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55490,"byte_end":55499,"line_start":800,"line_end":800,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57919,"byte_end":57928,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57472,"byte_end":57518,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57519,"byte_end":57522,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57523,"byte_end":57599,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57600,"byte_end":57636,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57637,"byte_end":57640,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57641,"byte_end":57653,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57654,"byte_end":57657,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57658,"byte_end":57733,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57734,"byte_end":57813,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57814,"byte_end":57889,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57890,"byte_end":57901,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58234,"byte_end":58238,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":57935,"byte_end":57978,"line_start":32,"line_end":32,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58175,"byte_end":58223,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58403,"byte_end":58414,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58251,"byte_end":58326,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58331,"byte_end":58393,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58511,"byte_end":58522,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58421,"byte_end":58503,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58599,"byte_end":58614,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58536,"byte_end":58591,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58799,"byte_end":58812,"line_start":53,"line_end":53,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub unsafe fn unlock_shared(&Self)","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58636,"byte_end":58663,"line_start":48,"line_end":48,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58668,"byte_end":58671,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58676,"byte_end":58688,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58693,"byte_end":58696,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58701,"byte_end":58784,"line_start":52,"line_end":52,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58920,"byte_end":58934,"line_start":56,"line_end":56,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58826,"byte_end":58912,"line_start":55,"line_end":55,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59015,"byte_end":59033,"line_start":59,"line_end":59,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":58948,"byte_end":59007,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59226,"byte_end":59242,"line_start":66,"line_end":66,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub unsafe fn unlock_exclusive(&Self)","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59055,"byte_end":59086,"line_start":61,"line_end":61,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59091,"byte_end":59094,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59099,"byte_end":59111,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59116,"byte_end":59119,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59124,"byte_end":59211,"line_start":65,"line_end":65,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59337,"byte_end":59346,"line_start":70,"line_end":70,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks if this `RwLock` is currently locked in any way.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59256,"byte_end":59315,"line_start":68,"line_end":68,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59320,"byte_end":59329,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60007,"byte_end":60020,"line_start":88,"line_end":88,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59627,"byte_end":59691,"line_start":82,"line_end":82,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59692,"byte_end":59695,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59696,"byte_end":59776,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59777,"byte_end":59852,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59853,"byte_end":59927,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":59928,"byte_end":59989,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60230,"byte_end":60248,"line_start":94,"line_end":94,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub unsafe fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60038,"byte_end":60094,"line_start":89,"line_end":89,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60099,"byte_end":60102,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60107,"byte_end":60119,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60124,"byte_end":60127,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60132,"byte_end":60215,"line_start":93,"line_end":93,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60462,"byte_end":60483,"line_start":101,"line_end":101,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub unsafe fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60262,"byte_end":60322,"line_start":96,"line_end":96,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60327,"byte_end":60330,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60335,"byte_end":60347,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60352,"byte_end":60355,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60360,"byte_end":60447,"line_start":100,"line_end":100,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60922,"byte_end":60933,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub unsafe fn bump_shared(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60497,"byte_end":60570,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60575,"byte_end":60578,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60583,"byte_end":60666,"line_start":105,"line_end":105,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60671,"byte_end":60754,"line_start":106,"line_end":106,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60759,"byte_end":60786,"line_start":107,"line_end":107,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60791,"byte_end":60794,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60799,"byte_end":60811,"line_start":109,"line_end":109,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60816,"byte_end":60819,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60824,"byte_end":60907,"line_start":111,"line_end":111,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61456,"byte_end":61470,"line_start":126,"line_end":126,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub unsafe fn bump_exclusive(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61017,"byte_end":61094,"line_start":117,"line_end":117,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61099,"byte_end":61102,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61107,"byte_end":61193,"line_start":119,"line_end":119,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61198,"byte_end":61284,"line_start":120,"line_end":120,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61289,"byte_end":61316,"line_start":121,"line_end":121,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61321,"byte_end":61324,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61329,"byte_end":61341,"line_start":123,"line_end":123,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61346,"byte_end":61349,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61354,"byte_end":61441,"line_start":125,"line_end":125,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61687,"byte_end":61705,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":477}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61558,"byte_end":61632,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61633,"byte_end":61669,"line_start":133,"line_end":133,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62004,"byte_end":62013,"line_start":141,"line_end":141,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub unsafe fn downgrade(&Self)","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61723,"byte_end":61793,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61798,"byte_end":61864,"line_start":136,"line_end":136,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61869,"byte_end":61872,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61877,"byte_end":61889,"line_start":138,"line_end":138,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61894,"byte_end":61897,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61902,"byte_end":61989,"line_start":140,"line_end":140,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62255,"byte_end":62269,"line_start":148,"line_end":148,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62025,"byte_end":62096,"line_start":144,"line_end":144,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62097,"byte_end":62100,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62101,"byte_end":62181,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62182,"byte_end":62237,"line_start":147,"line_end":147,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62339,"byte_end":62347,"line_start":150,"line_end":150,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62287,"byte_end":62329,"line_start":149,"line_end":149,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62407,"byte_end":62414,"line_start":153,"line_end":153,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62354,"byte_end":62397,"line_start":152,"line_end":152,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62494,"byte_end":62513,"line_start":156,"line_end":156,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62421,"byte_end":62486,"line_start":155,"line_end":155,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62633,"byte_end":62654,"line_start":159,"line_end":159,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62560,"byte_end":62625,"line_start":158,"line_end":158,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62777,"byte_end":62799,"line_start":162,"line_end":162,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62700,"byte_end":62769,"line_start":161,"line_end":161,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62923,"byte_end":62947,"line_start":165,"line_end":165,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62846,"byte_end":62915,"line_start":164,"line_end":164,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63380,"byte_end":63398,"line_start":175,"line_end":175,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62991,"byte_end":63061,"line_start":168,"line_end":168,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63062,"byte_end":63065,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63066,"byte_end":63121,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63122,"byte_end":63197,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63198,"byte_end":63269,"line_start":172,"line_end":172,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63270,"byte_end":63344,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63345,"byte_end":63362,"line_start":174,"line_end":174,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63499,"byte_end":63520,"line_start":177,"line_end":177,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63416,"byte_end":63491,"line_start":176,"line_end":176,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63628,"byte_end":63653,"line_start":180,"line_end":180,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63534,"byte_end":63620,"line_start":179,"line_end":179,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63774,"byte_end":63797,"line_start":184,"line_end":184,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63673,"byte_end":63756,"line_start":183,"line_end":183,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63971,"byte_end":64000,"line_start":187,"line_end":187,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63841,"byte_end":63914,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63919,"byte_end":63963,"line_start":186,"line_end":186,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64177,"byte_end":64208,"line_start":191,"line_end":191,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64047,"byte_end":64120,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64125,"byte_end":64169,"line_start":190,"line_end":190,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64584,"byte_end":64600,"line_start":200,"line_end":200,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64252,"byte_end":64330,"line_start":194,"line_end":194,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64331,"byte_end":64361,"line_start":195,"line_end":195,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64362,"byte_end":64365,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64366,"byte_end":64439,"line_start":197,"line_end":197,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64440,"byte_end":64514,"line_start":198,"line_end":198,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64515,"byte_end":64566,"line_start":199,"line_end":199,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64713,"byte_end":64728,"line_start":202,"line_end":202,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64618,"byte_end":64705,"line_start":201,"line_end":201,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64810,"byte_end":64829,"line_start":205,"line_end":205,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64742,"byte_end":64802,"line_start":204,"line_end":204,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65024,"byte_end":65041,"line_start":212,"line_end":212,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub unsafe fn unlock_upgradable(&Self)","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64851,"byte_end":64883,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64888,"byte_end":64891,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64896,"byte_end":64908,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64913,"byte_end":64916,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64921,"byte_end":65009,"line_start":211,"line_end":211,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65249,"byte_end":65256,"line_start":219,"line_end":219,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub unsafe fn upgrade(&Self)","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65055,"byte_end":65108,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65113,"byte_end":65116,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65121,"byte_end":65133,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65138,"byte_end":65141,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65146,"byte_end":65234,"line_start":218,"line_end":218,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65500,"byte_end":65511,"line_start":227,"line_end":227,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub unsafe fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65270,"byte_end":65341,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65346,"byte_end":65359,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65364,"byte_end":65367,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65372,"byte_end":65384,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65389,"byte_end":65392,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65397,"byte_end":65485,"line_start":226,"line_end":226,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65638,"byte_end":65658,"line_start":232,"line_end":232,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65531,"byte_end":65605,"line_start":230,"line_end":230,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65606,"byte_end":65620,"line_start":231,"line_end":231,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65901,"byte_end":65923,"line_start":238,"line_end":238,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub unsafe fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65699,"byte_end":65760,"line_start":233,"line_end":233,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65765,"byte_end":65768,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65773,"byte_end":65785,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65790,"byte_end":65793,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65798,"byte_end":65886,"line_start":237,"line_end":237,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66380,"byte_end":66395,"line_start":249,"line_end":249,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub unsafe fn bump_upgradable(&Self)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65937,"byte_end":66015,"line_start":240,"line_end":240,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66020,"byte_end":66023,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66028,"byte_end":66115,"line_start":242,"line_end":242,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66120,"byte_end":66207,"line_start":243,"line_end":243,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66212,"byte_end":66239,"line_start":244,"line_end":244,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66244,"byte_end":66247,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66252,"byte_end":66264,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66269,"byte_end":66272,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66277,"byte_end":66365,"line_start":248,"line_end":248,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66594,"byte_end":66619,"line_start":257,"line_end":257,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66485,"byte_end":66559,"line_start":255,"line_end":255,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66560,"byte_end":66576,"line_start":256,"line_end":256,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66857,"byte_end":66877,"line_start":263,"line_end":263,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub unsafe fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66665,"byte_end":66716,"line_start":258,"line_end":258,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66721,"byte_end":66724,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66729,"byte_end":66741,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66746,"byte_end":66749,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66754,"byte_end":66842,"line_start":262,"line_end":262,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67086,"byte_end":67109,"line_start":270,"line_end":270,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub unsafe fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66891,"byte_end":66946,"line_start":265,"line_end":265,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66951,"byte_end":66954,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66959,"byte_end":66971,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66976,"byte_end":66979,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66984,"byte_end":67071,"line_start":269,"line_end":269,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67235,"byte_end":67256,"line_start":275,"line_end":275,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67121,"byte_end":67198,"line_start":273,"line_end":273,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67199,"byte_end":67217,"line_start":274,"line_end":274,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67376,"byte_end":67399,"line_start":277,"line_end":277,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67298,"byte_end":67368,"line_start":276,"line_end":276,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67524,"byte_end":67549,"line_start":280,"line_end":280,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67446,"byte_end":67516,"line_start":279,"line_end":279,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67835,"byte_end":67850,"line_start":288,"line_end":288,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub unsafe fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67595,"byte_end":67666,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67671,"byte_end":67694,"line_start":283,"line_end":283,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67699,"byte_end":67702,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67707,"byte_end":67719,"line_start":285,"line_end":285,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67724,"byte_end":67727,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67732,"byte_end":67820,"line_start":287,"line_end":287,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68137,"byte_end":68154,"line_start":296,"line_end":296,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub unsafe fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67897,"byte_end":67968,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67973,"byte_end":67996,"line_start":291,"line_end":291,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68001,"byte_end":68004,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68009,"byte_end":68021,"line_start":293,"line_end":293,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68026,"byte_end":68029,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68034,"byte_end":68122,"line_start":295,"line_end":295,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68906,"byte_end":68912,"line_start":311,"line_end":311,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68198,"byte_end":68222,"line_start":299,"line_end":299,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68223,"byte_end":68226,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68227,"byte_end":68304,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68305,"byte_end":68384,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68385,"byte_end":68464,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68465,"byte_end":68523,"line_start":304,"line_end":304,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68524,"byte_end":68527,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68528,"byte_end":68605,"line_start":306,"line_end":306,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68606,"byte_end":68686,"line_start":307,"line_end":307,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68687,"byte_end":68765,"line_start":308,"line_end":308,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68766,"byte_end":68844,"line_start":309,"line_end":309,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":68845,"byte_end":68894,"line_start":310,"line_end":310,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70187,"byte_end":70190,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70061,"byte_end":70124,"line_start":359,"line_end":359,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70129,"byte_end":70161,"line_start":360,"line_end":360,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70166,"byte_end":70175,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70433,"byte_end":70443,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70321,"byte_end":70379,"line_start":369,"line_end":369,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70384,"byte_end":70393,"line_start":370,"line_end":370,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70398,"byte_end":70421,"line_start":371,"line_end":371,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70763,"byte_end":70772,"line_start":384,"line_end":384,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70538,"byte_end":70610,"line_start":378,"line_end":378,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70615,"byte_end":70634,"line_start":379,"line_end":379,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70639,"byte_end":70642,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70647,"byte_end":70717,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70722,"byte_end":70731,"line_start":382,"line_end":382,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70736,"byte_end":70745,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72099,"byte_end":72103,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71491,"byte_end":71567,"line_start":415,"line_end":415,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71572,"byte_end":71601,"line_start":416,"line_end":416,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71606,"byte_end":71609,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71614,"byte_end":71690,"line_start":418,"line_end":418,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71695,"byte_end":71771,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71776,"byte_end":71800,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71805,"byte_end":71808,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71813,"byte_end":71889,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71894,"byte_end":71960,"line_start":423,"line_end":423,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71965,"byte_end":71968,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":71973,"byte_end":72045,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72050,"byte_end":72073,"line_start":426,"line_end":426,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72078,"byte_end":72087,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72606,"byte_end":72614,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72272,"byte_end":72334,"line_start":434,"line_end":434,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72339,"byte_end":72342,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72347,"byte_end":72424,"line_start":436,"line_end":436,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72429,"byte_end":72506,"line_start":437,"line_end":437,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72511,"byte_end":72534,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72539,"byte_end":72542,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72547,"byte_end":72580,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72585,"byte_end":72594,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73233,"byte_end":73238,"line_start":460,"line_end":460,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72857,"byte_end":72930,"line_start":451,"line_end":451,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72935,"byte_end":72971,"line_start":452,"line_end":452,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72976,"byte_end":72979,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":72984,"byte_end":73054,"line_start":454,"line_end":454,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73059,"byte_end":73097,"line_start":455,"line_end":455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73102,"byte_end":73105,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73110,"byte_end":73185,"line_start":457,"line_end":457,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73190,"byte_end":73207,"line_start":458,"line_end":458,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73212,"byte_end":73221,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73737,"byte_end":73746,"line_start":474,"line_end":474,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73412,"byte_end":73475,"line_start":466,"line_end":466,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73480,"byte_end":73483,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73488,"byte_end":73564,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73569,"byte_end":73642,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73647,"byte_end":73665,"line_start":470,"line_end":470,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73670,"byte_end":73673,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73678,"byte_end":73711,"line_start":472,"line_end":472,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73716,"byte_end":73725,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74242,"byte_end":74249,"line_start":488,"line_end":488,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":73994,"byte_end":74049,"line_start":483,"line_end":483,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74054,"byte_end":74057,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74062,"byte_end":74138,"line_start":485,"line_end":485,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74143,"byte_end":74216,"line_start":486,"line_end":486,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74221,"byte_end":74230,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74415,"byte_end":74424,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks whether this `RwLock` is currently locked in any way.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74325,"byte_end":74389,"line_start":492,"line_end":492,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74394,"byte_end":74403,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75013,"byte_end":75030,"line_start":510,"line_end":510,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74482,"byte_end":74515,"line_start":498,"line_end":498,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74520,"byte_end":74523,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74528,"byte_end":74602,"line_start":500,"line_end":500,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74607,"byte_end":74682,"line_start":501,"line_end":501,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74687,"byte_end":74708,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74713,"byte_end":74716,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74721,"byte_end":74733,"line_start":504,"line_end":504,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74738,"byte_end":74741,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74746,"byte_end":74820,"line_start":506,"line_end":506,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74825,"byte_end":74899,"line_start":507,"line_end":507,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74904,"byte_end":74980,"line_start":508,"line_end":508,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":74985,"byte_end":74994,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75621,"byte_end":75639,"line_start":526,"line_end":526,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75085,"byte_end":75119,"line_start":514,"line_end":514,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75124,"byte_end":75127,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75132,"byte_end":75206,"line_start":516,"line_end":516,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75211,"byte_end":75287,"line_start":517,"line_end":517,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75292,"byte_end":75313,"line_start":518,"line_end":518,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75318,"byte_end":75321,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75326,"byte_end":75338,"line_start":520,"line_end":520,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75343,"byte_end":75346,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75351,"byte_end":75425,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75430,"byte_end":75505,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75510,"byte_end":75588,"line_start":524,"line_end":524,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75593,"byte_end":75602,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76105,"byte_end":76108,"line_start":540,"line_end":540,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75697,"byte_end":75754,"line_start":530,"line_end":530,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75759,"byte_end":75762,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75767,"byte_end":75843,"line_start":532,"line_end":532,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75848,"byte_end":75902,"line_start":533,"line_end":533,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75907,"byte_end":75930,"line_start":534,"line_end":534,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75935,"byte_end":75938,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75943,"byte_end":75955,"line_start":536,"line_end":536,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75960,"byte_end":75963,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":75968,"byte_end":76035,"line_start":538,"line_end":538,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76040,"byte_end":76086,"line_start":539,"line_end":539,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76740,"byte_end":76748,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76153,"byte_end":76202,"line_start":544,"line_end":544,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76207,"byte_end":76210,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76215,"byte_end":76289,"line_start":546,"line_end":546,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76294,"byte_end":76367,"line_start":547,"line_end":547,"column_start":5,"column_end":78}},{"value":"/ alive, for example when dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76372,"byte_end":76417,"line_start":548,"line_end":548,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76422,"byte_end":76425,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76430,"byte_end":76442,"line_start":550,"line_end":550,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76447,"byte_end":76450,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76455,"byte_end":76526,"line_start":552,"line_end":552,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76531,"byte_end":76603,"line_start":553,"line_end":553,"column_start":5,"column_end":77}},{"value":"/ `RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76608,"byte_end":76685,"line_start":554,"line_end":554,"column_start":5,"column_end":82}},{"value":"/ using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76690,"byte_end":76714,"line_start":555,"line_end":555,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76719,"byte_end":76728,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77414,"byte_end":77436,"line_start":575,"line_end":575,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76854,"byte_end":76916,"line_start":563,"line_end":563,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76921,"byte_end":76924,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76929,"byte_end":77003,"line_start":565,"line_end":565,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77008,"byte_end":77083,"line_start":566,"line_end":566,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77088,"byte_end":77109,"line_start":567,"line_end":567,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77114,"byte_end":77117,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77122,"byte_end":77134,"line_start":569,"line_end":569,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77139,"byte_end":77142,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77147,"byte_end":77221,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77226,"byte_end":77300,"line_start":572,"line_end":572,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77305,"byte_end":77381,"line_start":573,"line_end":573,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77386,"byte_end":77395,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78061,"byte_end":78084,"line_start":591,"line_end":591,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77496,"byte_end":77559,"line_start":579,"line_end":579,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77564,"byte_end":77567,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77572,"byte_end":77646,"line_start":581,"line_end":581,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77651,"byte_end":77727,"line_start":582,"line_end":582,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77732,"byte_end":77753,"line_start":583,"line_end":583,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77758,"byte_end":77761,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77766,"byte_end":77778,"line_start":585,"line_end":585,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77783,"byte_end":77786,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77791,"byte_end":77865,"line_start":587,"line_end":587,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77870,"byte_end":77945,"line_start":588,"line_end":588,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":77950,"byte_end":78028,"line_start":589,"line_end":589,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78033,"byte_end":78042,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78536,"byte_end":78548,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78199,"byte_end":78276,"line_start":597,"line_end":597,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78281,"byte_end":78296,"line_start":598,"line_end":598,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78301,"byte_end":78304,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78309,"byte_end":78380,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78385,"byte_end":78456,"line_start":601,"line_end":601,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78461,"byte_end":78510,"line_start":602,"line_end":602,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78515,"byte_end":78524,"line_start":603,"line_end":603,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79161,"byte_end":79175,"line_start":620,"line_end":620,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78824,"byte_end":78901,"line_start":613,"line_end":613,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78906,"byte_end":78921,"line_start":614,"line_end":614,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78926,"byte_end":78929,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78934,"byte_end":79005,"line_start":616,"line_end":616,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79010,"byte_end":79081,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79086,"byte_end":79135,"line_start":618,"line_end":618,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79140,"byte_end":79149,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79796,"byte_end":79809,"line_start":636,"line_end":636,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79452,"byte_end":79525,"line_start":629,"line_end":629,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79530,"byte_end":79553,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79558,"byte_end":79561,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79566,"byte_end":79637,"line_start":632,"line_end":632,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79642,"byte_end":79713,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79718,"byte_end":79770,"line_start":634,"line_end":634,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":79775,"byte_end":79784,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80434,"byte_end":80449,"line_start":652,"line_end":652,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80090,"byte_end":80163,"line_start":645,"line_end":645,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80168,"byte_end":80191,"line_start":646,"line_end":646,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80196,"byte_end":80199,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80204,"byte_end":80275,"line_start":648,"line_end":648,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80280,"byte_end":80351,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80356,"byte_end":80408,"line_start":650,"line_end":650,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80413,"byte_end":80422,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81580,"byte_end":81594,"line_start":679,"line_end":679,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80787,"byte_end":80863,"line_start":663,"line_end":663,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80868,"byte_end":80897,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80902,"byte_end":80905,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80910,"byte_end":80986,"line_start":666,"line_end":666,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80991,"byte_end":81067,"line_start":667,"line_end":667,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81072,"byte_end":81096,"line_start":668,"line_end":668,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81101,"byte_end":81104,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81109,"byte_end":81184,"line_start":670,"line_end":670,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81189,"byte_end":81264,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81269,"byte_end":81340,"line_start":672,"line_end":672,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81345,"byte_end":81419,"line_start":673,"line_end":673,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81424,"byte_end":81441,"line_start":674,"line_end":674,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81446,"byte_end":81449,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81454,"byte_end":81526,"line_start":676,"line_end":676,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81531,"byte_end":81554,"line_start":677,"line_end":677,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81559,"byte_end":81568,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82278,"byte_end":82296,"line_start":696,"line_end":696,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81773,"byte_end":81835,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81840,"byte_end":81843,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81848,"byte_end":81925,"line_start":687,"line_end":687,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":81930,"byte_end":82007,"line_start":688,"line_end":688,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82012,"byte_end":82035,"line_start":689,"line_end":689,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82040,"byte_end":82043,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82048,"byte_end":82124,"line_start":691,"line_end":691,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82129,"byte_end":82206,"line_start":692,"line_end":692,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82211,"byte_end":82214,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82219,"byte_end":82252,"line_start":694,"line_end":694,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82257,"byte_end":82266,"line_start":695,"line_end":695,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83143,"byte_end":83165,"line_start":718,"line_end":718,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82610,"byte_end":82687,"line_start":707,"line_end":707,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82692,"byte_end":82707,"line_start":708,"line_end":708,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82712,"byte_end":82715,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82720,"byte_end":82791,"line_start":710,"line_end":710,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82796,"byte_end":82867,"line_start":711,"line_end":711,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82872,"byte_end":82921,"line_start":712,"line_end":712,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82926,"byte_end":82929,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82934,"byte_end":83007,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83012,"byte_end":83079,"line_start":715,"line_end":715,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83084,"byte_end":83117,"line_start":716,"line_end":716,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83122,"byte_end":83131,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83811,"byte_end":83835,"line_start":737,"line_end":737,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83474,"byte_end":83551,"line_start":730,"line_end":730,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83556,"byte_end":83571,"line_start":731,"line_end":731,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83576,"byte_end":83579,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83584,"byte_end":83655,"line_start":733,"line_end":733,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83660,"byte_end":83731,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83736,"byte_end":83785,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":83790,"byte_end":83799,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84963,"byte_end":84978,"line_start":772,"line_end":772,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84485,"byte_end":84565,"line_start":762,"line_end":762,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84570,"byte_end":84599,"line_start":763,"line_end":763,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84604,"byte_end":84607,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84612,"byte_end":84691,"line_start":765,"line_end":765,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84696,"byte_end":84774,"line_start":766,"line_end":766,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84779,"byte_end":84824,"line_start":767,"line_end":767,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84829,"byte_end":84832,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84837,"byte_end":84909,"line_start":769,"line_end":769,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84914,"byte_end":84937,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84942,"byte_end":84951,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85505,"byte_end":85524,"line_start":786,"line_end":786,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85167,"byte_end":85233,"line_start":778,"line_end":778,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85238,"byte_end":85241,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85246,"byte_end":85323,"line_start":780,"line_end":780,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85328,"byte_end":85405,"line_start":781,"line_end":781,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85410,"byte_end":85433,"line_start":782,"line_end":782,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85438,"byte_end":85441,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85446,"byte_end":85479,"line_start":784,"line_end":784,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85484,"byte_end":85493,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86187,"byte_end":86210,"line_start":804,"line_end":804,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85846,"byte_end":85927,"line_start":797,"line_end":797,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85932,"byte_end":85947,"line_start":798,"line_end":798,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85952,"byte_end":85955,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85960,"byte_end":86031,"line_start":800,"line_end":800,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86036,"byte_end":86107,"line_start":801,"line_end":801,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86112,"byte_end":86161,"line_start":802,"line_end":802,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86166,"byte_end":86175,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86870,"byte_end":86895,"line_start":823,"line_end":823,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86529,"byte_end":86610,"line_start":816,"line_end":816,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86615,"byte_end":86630,"line_start":817,"line_end":817,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86635,"byte_end":86638,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86643,"byte_end":86714,"line_start":819,"line_end":819,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86719,"byte_end":86790,"line_start":820,"line_end":820,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86795,"byte_end":86844,"line_start":821,"line_end":821,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":86849,"byte_end":86858,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88368,"byte_end":88383,"line_start":873,"line_end":873,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88210,"byte_end":88282,"line_start":870,"line_end":870,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88283,"byte_end":88295,"line_start":871,"line_end":871,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88296,"byte_end":88356,"line_start":872,"line_end":872,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88652,"byte_end":88658,"line_start":880,"line_end":880,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88574,"byte_end":88640,"line_start":879,"line_end":879,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89138,"byte_end":89141,"line_start":893,"line_end":893,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88719,"byte_end":88793,"line_start":884,"line_end":884,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88798,"byte_end":88801,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88806,"byte_end":88868,"line_start":886,"line_end":886,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88873,"byte_end":88904,"line_start":887,"line_end":887,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88909,"byte_end":88912,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88917,"byte_end":88968,"line_start":889,"line_end":889,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88973,"byte_end":89054,"line_start":890,"line_end":890,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89059,"byte_end":89112,"line_start":891,"line_end":891,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89117,"byte_end":89126,"line_start":892,"line_end":892,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89985,"byte_end":89992,"line_start":917,"line_end":917,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89485,"byte_end":89559,"line_start":907,"line_end":907,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89564,"byte_end":89640,"line_start":908,"line_end":908,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89645,"byte_end":89648,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89653,"byte_end":89715,"line_start":910,"line_end":910,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89720,"byte_end":89751,"line_start":911,"line_end":911,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89756,"byte_end":89759,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89764,"byte_end":89815,"line_start":913,"line_end":913,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89820,"byte_end":89901,"line_start":914,"line_end":914,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89906,"byte_end":89959,"line_start":915,"line_end":915,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":89964,"byte_end":89973,"line_start":916,"line_end":916,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90744,"byte_end":90752,"line_start":941,"line_end":941,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90447,"byte_end":90514,"line_start":934,"line_end":934,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90519,"byte_end":90522,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90527,"byte_end":90579,"line_start":936,"line_end":936,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90584,"byte_end":90587,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90592,"byte_end":90660,"line_start":938,"line_end":938,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90665,"byte_end":90718,"line_start":939,"line_end":939,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":90723,"byte_end":90732,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91907,"byte_end":91918,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91106,"byte_end":91160,"line_start":955,"line_end":955,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91165,"byte_end":91168,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91173,"byte_end":91247,"line_start":957,"line_end":957,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91252,"byte_end":91327,"line_start":958,"line_end":958,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91332,"byte_end":91405,"line_start":959,"line_end":959,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91410,"byte_end":91479,"line_start":960,"line_end":960,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91484,"byte_end":91561,"line_start":961,"line_end":961,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91566,"byte_end":91633,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91638,"byte_end":91641,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91646,"byte_end":91722,"line_start":964,"line_end":964,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91727,"byte_end":91803,"line_start":965,"line_end":965,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91808,"byte_end":91881,"line_start":966,"line_end":966,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91886,"byte_end":91895,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92402,"byte_end":92415,"line_start":983,"line_end":983,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92105,"byte_end":92172,"line_start":976,"line_end":976,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92177,"byte_end":92180,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92185,"byte_end":92237,"line_start":978,"line_end":978,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92242,"byte_end":92245,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92250,"byte_end":92318,"line_start":980,"line_end":980,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92323,"byte_end":92376,"line_start":981,"line_end":981,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92381,"byte_end":92390,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92996,"byte_end":93000,"line_start":1001,"line_end":1001,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92696,"byte_end":92768,"line_start":995,"line_end":995,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92773,"byte_end":92776,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92781,"byte_end":92857,"line_start":997,"line_end":997,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92862,"byte_end":92938,"line_start":998,"line_end":998,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92943,"byte_end":92970,"line_start":999,"line_end":999,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":92975,"byte_end":92984,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94328,"byte_end":94344,"line_start":1047,"line_end":1047,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94166,"byte_end":94242,"line_start":1044,"line_end":1044,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94243,"byte_end":94255,"line_start":1045,"line_end":1045,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94256,"byte_end":94316,"line_start":1046,"line_end":1046,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94618,"byte_end":94624,"line_start":1054,"line_end":1054,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94540,"byte_end":94606,"line_start":1053,"line_end":1053,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95107,"byte_end":95110,"line_start":1067,"line_end":1067,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94685,"byte_end":94760,"line_start":1058,"line_end":1058,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94765,"byte_end":94768,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94773,"byte_end":94836,"line_start":1060,"line_end":1060,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94841,"byte_end":94872,"line_start":1061,"line_end":1061,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94877,"byte_end":94880,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94885,"byte_end":94936,"line_start":1063,"line_end":1063,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94941,"byte_end":95023,"line_start":1064,"line_end":1064,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95028,"byte_end":95081,"line_start":1065,"line_end":1065,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95086,"byte_end":95095,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95971,"byte_end":95978,"line_start":1091,"line_end":1091,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95468,"byte_end":95543,"line_start":1081,"line_end":1081,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95548,"byte_end":95624,"line_start":1082,"line_end":1082,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95629,"byte_end":95632,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95637,"byte_end":95700,"line_start":1084,"line_end":1084,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95705,"byte_end":95736,"line_start":1085,"line_end":1085,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95741,"byte_end":95744,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95749,"byte_end":95800,"line_start":1087,"line_end":1087,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95805,"byte_end":95887,"line_start":1088,"line_end":1088,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95892,"byte_end":95945,"line_start":1089,"line_end":1089,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":95950,"byte_end":95959,"line_start":1090,"line_end":1090,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":96679,"byte_end":96687,"line_start":1113,"line_end":1113,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":96447,"byte_end":96514,"line_start":1108,"line_end":1108,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":96519,"byte_end":96522,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":96527,"byte_end":96595,"line_start":1110,"line_end":1110,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":96600,"byte_end":96653,"line_start":1111,"line_end":1111,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":96658,"byte_end":96667,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97395,"byte_end":97404,"line_start":1133,"line_end":1133,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97053,"byte_end":97129,"line_start":1127,"line_end":1127,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97134,"byte_end":97199,"line_start":1128,"line_end":1128,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97204,"byte_end":97207,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97212,"byte_end":97285,"line_start":1130,"line_end":1130,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97290,"byte_end":97363,"line_start":1131,"line_end":1131,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97368,"byte_end":97383,"line_start":1132,"line_end":1132,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98181,"byte_end":98204,"line_start":1154,"line_end":1154,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97827,"byte_end":97915,"line_start":1148,"line_end":1148,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97920,"byte_end":97985,"line_start":1149,"line_end":1149,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97990,"byte_end":97993,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97998,"byte_end":98071,"line_start":1151,"line_end":1151,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98076,"byte_end":98149,"line_start":1152,"line_end":1152,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98154,"byte_end":98169,"line_start":1153,"line_end":1153,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99451,"byte_end":99462,"line_start":1182,"line_end":1182,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98649,"byte_end":98703,"line_start":1169,"line_end":1169,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98708,"byte_end":98711,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98716,"byte_end":98790,"line_start":1171,"line_end":1171,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98795,"byte_end":98870,"line_start":1172,"line_end":1172,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98875,"byte_end":98948,"line_start":1173,"line_end":1173,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98953,"byte_end":99022,"line_start":1174,"line_end":1174,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99027,"byte_end":99104,"line_start":1175,"line_end":1175,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99109,"byte_end":99176,"line_start":1176,"line_end":1176,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99181,"byte_end":99184,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99189,"byte_end":99265,"line_start":1178,"line_end":1178,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99270,"byte_end":99346,"line_start":1179,"line_end":1179,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99351,"byte_end":99425,"line_start":1180,"line_end":1180,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99430,"byte_end":99439,"line_start":1181,"line_end":1181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99954,"byte_end":99967,"line_start":1197,"line_end":1197,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99657,"byte_end":99724,"line_start":1190,"line_end":1190,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99729,"byte_end":99732,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99737,"byte_end":99789,"line_start":1192,"line_end":1192,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99794,"byte_end":99797,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99802,"byte_end":99870,"line_start":1194,"line_end":1194,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99875,"byte_end":99928,"line_start":1195,"line_end":1195,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":99933,"byte_end":99942,"line_start":1196,"line_end":1196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100560,"byte_end":100564,"line_start":1215,"line_end":1215,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100259,"byte_end":100331,"line_start":1209,"line_end":1209,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100336,"byte_end":100339,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100344,"byte_end":100420,"line_start":1211,"line_end":1211,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100425,"byte_end":100502,"line_start":1212,"line_end":1212,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100507,"byte_end":100534,"line_start":1213,"line_end":1213,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100539,"byte_end":100548,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102110,"byte_end":102135,"line_start":1268,"line_end":1268,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101948,"byte_end":102024,"line_start":1265,"line_end":1265,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102025,"byte_end":102037,"line_start":1266,"line_end":1266,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102038,"byte_end":102098,"line_start":1267,"line_end":1267,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102547,"byte_end":102553,"line_start":1280,"line_end":1280,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102469,"byte_end":102535,"line_start":1279,"line_end":1279,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102846,"byte_end":102854,"line_start":1289,"line_end":1289,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102614,"byte_end":102681,"line_start":1284,"line_end":1284,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102686,"byte_end":102689,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102694,"byte_end":102762,"line_start":1286,"line_end":1286,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102767,"byte_end":102820,"line_start":1287,"line_end":1287,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102825,"byte_end":102834,"line_start":1288,"line_end":1288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103308,"byte_end":103315,"line_start":1303,"line_end":1303,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103153,"byte_end":103234,"line_start":1301,"line_end":1301,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103239,"byte_end":103296,"line_start":1302,"line_end":1302,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103854,"byte_end":103865,"line_start":1319,"line_end":1319,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103657,"byte_end":103741,"line_start":1316,"line_end":1316,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103746,"byte_end":103749,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":103754,"byte_end":103842,"line_start":1318,"line_end":1318,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105189,"byte_end":105200,"line_start":1348,"line_end":1348,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104378,"byte_end":104432,"line_start":1335,"line_end":1335,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104437,"byte_end":104440,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104445,"byte_end":104519,"line_start":1337,"line_end":1337,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104524,"byte_end":104599,"line_start":1338,"line_end":1338,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104604,"byte_end":104677,"line_start":1339,"line_end":1339,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104682,"byte_end":104751,"line_start":1340,"line_end":1340,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104756,"byte_end":104833,"line_start":1341,"line_end":1341,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104838,"byte_end":104905,"line_start":1342,"line_end":1342,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104910,"byte_end":104913,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104918,"byte_end":104994,"line_start":1344,"line_end":1344,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104999,"byte_end":105075,"line_start":1345,"line_end":1345,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105080,"byte_end":105163,"line_start":1346,"line_end":1346,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105168,"byte_end":105177,"line_start":1347,"line_end":1347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105703,"byte_end":105716,"line_start":1363,"line_end":1363,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105406,"byte_end":105473,"line_start":1356,"line_end":1356,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105478,"byte_end":105481,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105486,"byte_end":105538,"line_start":1358,"line_end":1358,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105543,"byte_end":105546,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105551,"byte_end":105619,"line_start":1360,"line_end":1360,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105624,"byte_end":105677,"line_start":1361,"line_end":1361,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":105682,"byte_end":105691,"line_start":1362,"line_end":1362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106331,"byte_end":106335,"line_start":1381,"line_end":1381,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106020,"byte_end":106092,"line_start":1375,"line_end":1375,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106097,"byte_end":106100,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106105,"byte_end":106181,"line_start":1377,"line_end":1377,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106186,"byte_end":106273,"line_start":1378,"line_end":1378,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106278,"byte_end":106305,"line_start":1379,"line_end":1379,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106310,"byte_end":106319,"line_start":1380,"line_end":1380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106988,"byte_end":106997,"line_start":1397,"line_end":1397,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106615,"byte_end":106693,"line_start":1390,"line_end":1390,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106698,"byte_end":106774,"line_start":1391,"line_end":1391,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106779,"byte_end":106792,"line_start":1392,"line_end":1392,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106797,"byte_end":106800,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106805,"byte_end":106878,"line_start":1394,"line_end":1394,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106883,"byte_end":106956,"line_start":1395,"line_end":1395,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106961,"byte_end":106976,"line_start":1396,"line_end":1396,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107701,"byte_end":107716,"line_start":1417,"line_end":1417,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107446,"byte_end":107518,"line_start":1412,"line_end":1412,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107523,"byte_end":107566,"line_start":1413,"line_end":1413,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107571,"byte_end":107574,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107579,"byte_end":107650,"line_start":1415,"line_end":1415,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107655,"byte_end":107689,"line_start":1416,"line_end":1416,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108459,"byte_end":108476,"line_start":1440,"line_end":1440,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108190,"byte_end":108262,"line_start":1434,"line_end":1434,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108267,"byte_end":108310,"line_start":1435,"line_end":1435,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108315,"byte_end":108318,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108323,"byte_end":108394,"line_start":1437,"line_end":1437,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108399,"byte_end":108433,"line_start":1438,"line_end":1438,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":108438,"byte_end":108447,"line_start":1439,"line_end":1439,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110525,"byte_end":110546,"line_start":1506,"line_end":1506,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110069,"byte_end":110153,"line_start":1498,"line_end":1498,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110154,"byte_end":110189,"line_start":1499,"line_end":1499,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110190,"byte_end":110193,"line_start":1500,"line_end":1500,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110194,"byte_end":110283,"line_start":1501,"line_end":1501,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110284,"byte_end":110359,"line_start":1502,"line_end":1502,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110360,"byte_end":110440,"line_start":1503,"line_end":1503,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110441,"byte_end":110452,"line_start":1504,"line_end":1504,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110453,"byte_end":110513,"line_start":1505,"line_end":1505,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111399,"byte_end":111402,"line_start":1528,"line_end":1528,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110968,"byte_end":111042,"line_start":1519,"line_end":1519,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111047,"byte_end":111050,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111055,"byte_end":111123,"line_start":1521,"line_end":1521,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111128,"byte_end":111159,"line_start":1522,"line_end":1522,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111164,"byte_end":111167,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111172,"byte_end":111223,"line_start":1524,"line_end":1524,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111228,"byte_end":111315,"line_start":1525,"line_end":1525,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111320,"byte_end":111373,"line_start":1526,"line_end":1526,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111378,"byte_end":111387,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112237,"byte_end":112244,"line_start":1552,"line_end":1552,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111725,"byte_end":111799,"line_start":1542,"line_end":1542,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111804,"byte_end":111880,"line_start":1543,"line_end":1543,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111885,"byte_end":111888,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111893,"byte_end":111961,"line_start":1545,"line_end":1545,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":111966,"byte_end":111997,"line_start":1546,"line_end":1546,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112002,"byte_end":112005,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112010,"byte_end":112061,"line_start":1548,"line_end":1548,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112066,"byte_end":112153,"line_start":1549,"line_end":1549,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112158,"byte_end":112211,"line_start":1550,"line_end":1550,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112216,"byte_end":112225,"line_start":1551,"line_end":1551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113569,"byte_end":113580,"line_start":1584,"line_end":1584,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112762,"byte_end":112816,"line_start":1571,"line_end":1571,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112821,"byte_end":112824,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112829,"byte_end":112903,"line_start":1573,"line_end":1573,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112908,"byte_end":112983,"line_start":1574,"line_end":1574,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112988,"byte_end":113061,"line_start":1575,"line_end":1575,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113066,"byte_end":113135,"line_start":1576,"line_end":1576,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113140,"byte_end":113217,"line_start":1577,"line_end":1577,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113222,"byte_end":113289,"line_start":1578,"line_end":1578,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113294,"byte_end":113297,"line_start":1579,"line_end":1579,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113302,"byte_end":113378,"line_start":1580,"line_end":1580,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113383,"byte_end":113459,"line_start":1581,"line_end":1581,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113464,"byte_end":113543,"line_start":1582,"line_end":1582,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113548,"byte_end":113557,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115254,"byte_end":115276,"line_start":1641,"line_end":1641,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114794,"byte_end":114880,"line_start":1633,"line_end":1633,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114881,"byte_end":114916,"line_start":1634,"line_end":1634,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114917,"byte_end":114920,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114921,"byte_end":115012,"line_start":1636,"line_end":1636,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115013,"byte_end":115088,"line_start":1637,"line_end":1637,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115089,"byte_end":115169,"line_start":1638,"line_end":1638,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115170,"byte_end":115181,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115182,"byte_end":115242,"line_start":1640,"line_end":1640,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116142,"byte_end":116145,"line_start":1666,"line_end":1666,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115708,"byte_end":115783,"line_start":1657,"line_end":1657,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115788,"byte_end":115791,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115796,"byte_end":115865,"line_start":1659,"line_end":1659,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115870,"byte_end":115901,"line_start":1660,"line_end":1660,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115906,"byte_end":115909,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115914,"byte_end":115965,"line_start":1662,"line_end":1662,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115970,"byte_end":116058,"line_start":1663,"line_end":1663,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116063,"byte_end":116116,"line_start":1664,"line_end":1664,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116121,"byte_end":116130,"line_start":1665,"line_end":1665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116997,"byte_end":117004,"line_start":1690,"line_end":1690,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116482,"byte_end":116557,"line_start":1680,"line_end":1680,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116562,"byte_end":116638,"line_start":1681,"line_end":1681,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116643,"byte_end":116646,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116651,"byte_end":116720,"line_start":1683,"line_end":1683,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116725,"byte_end":116756,"line_start":1684,"line_end":1684,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116761,"byte_end":116764,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116769,"byte_end":116820,"line_start":1686,"line_end":1686,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116825,"byte_end":116913,"line_start":1687,"line_end":1687,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116918,"byte_end":116971,"line_start":1688,"line_end":1688,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":116976,"byte_end":116985,"line_start":1689,"line_end":1689,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118345,"byte_end":118356,"line_start":1722,"line_end":1722,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117537,"byte_end":117591,"line_start":1709,"line_end":1709,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117596,"byte_end":117599,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117604,"byte_end":117678,"line_start":1711,"line_end":1711,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117683,"byte_end":117758,"line_start":1712,"line_end":1712,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117763,"byte_end":117836,"line_start":1713,"line_end":1713,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117841,"byte_end":117910,"line_start":1714,"line_end":1714,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117915,"byte_end":117992,"line_start":1715,"line_end":1715,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117997,"byte_end":118064,"line_start":1716,"line_end":1716,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118069,"byte_end":118072,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118077,"byte_end":118153,"line_start":1718,"line_end":1718,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118158,"byte_end":118234,"line_start":1719,"line_end":1719,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118239,"byte_end":118319,"line_start":1720,"line_end":1720,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118324,"byte_end":118333,"line_start":1721,"line_end":1721,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3958,"byte_end":3969,"line_start":102,"line_end":102,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9279,"byte_end":9284,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9353,"byte_end":9358,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9390,"byte_end":9395,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10073,"byte_end":10078,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10445,"byte_end":10450,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14033,"byte_end":14038,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14690,"byte_end":14695,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15896,"byte_end":15901,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":16039,"byte_end":16044,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":16190,"byte_end":16195,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":16484,"byte_end":16501,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17994,"byte_end":18004,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18062,"byte_end":18072,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20454,"byte_end":20464,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22496,"byte_end":22506,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22690,"byte_end":22700,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22875,"byte_end":22885,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23136,"byte_end":23146,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23342,"byte_end":23352,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24218,"byte_end":24234,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24315,"byte_end":24331,"line_start":604,"line_end":604,"column_start":67,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24421,"byte_end":24437,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26191,"byte_end":26207,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27229,"byte_end":27245,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27417,"byte_end":27433,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27596,"byte_end":27612,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27863,"byte_end":27879,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":28079,"byte_end":28095,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30651,"byte_end":30668,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30742,"byte_end":30759,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30804,"byte_end":30821,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33214,"byte_end":33231,"line_start":147,"line_end":147,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34537,"byte_end":34554,"line_start":185,"line_end":185,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35653,"byte_end":35667,"line_start":216,"line_end":216,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35767,"byte_end":35781,"line_start":220,"line_end":220,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35833,"byte_end":35847,"line_start":224,"line_end":224,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36961,"byte_end":36975,"line_start":262,"line_end":262,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37645,"byte_end":37659,"line_start":282,"line_end":282,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41674,"byte_end":41688,"line_start":397,"line_end":397,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42377,"byte_end":42391,"line_start":415,"line_end":415,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43635,"byte_end":43649,"line_start":447,"line_end":447,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43827,"byte_end":43841,"line_start":454,"line_end":454,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":44027,"byte_end":44041,"line_start":461,"line_end":461,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":44393,"byte_end":44410,"line_start":470,"line_end":470,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46058,"byte_end":46077,"line_start":527,"line_end":527,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46160,"byte_end":46179,"line_start":531,"line_end":531,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48737,"byte_end":48756,"line_start":609,"line_end":609,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50851,"byte_end":50870,"line_start":666,"line_end":666,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51080,"byte_end":51099,"line_start":676,"line_end":676,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51389,"byte_end":51408,"line_start":688,"line_end":688,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51632,"byte_end":51651,"line_start":696,"line_end":696,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52667,"byte_end":52692,"line_start":724,"line_end":724,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52779,"byte_end":52804,"line_start":729,"line_end":729,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54676,"byte_end":54701,"line_start":786,"line_end":786,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55774,"byte_end":55799,"line_start":811,"line_end":811,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55995,"byte_end":56020,"line_start":821,"line_end":821,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":56308,"byte_end":56333,"line_start":833,"line_end":833,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":56557,"byte_end":56582,"line_start":841,"line_end":841,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":69659,"byte_end":69665,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":69742,"byte_end":69748,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":69781,"byte_end":69787,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70519,"byte_end":70525,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70949,"byte_end":70955,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76835,"byte_end":76841,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78180,"byte_end":78186,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80768,"byte_end":80774,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82591,"byte_end":82597,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84180,"byte_end":84186,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85827,"byte_end":85833,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87265,"byte_end":87271,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87412,"byte_end":87418,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87567,"byte_end":87573,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87863,"byte_end":87880,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88542,"byte_end":88557,"line_start":878,"line_end":878,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91074,"byte_end":91089,"line_start":954,"line_end":954,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93213,"byte_end":93228,"line_start":1009,"line_end":1009,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93410,"byte_end":93425,"line_start":1017,"line_end":1017,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93696,"byte_end":93711,"line_start":1027,"line_end":1027,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93912,"byte_end":93927,"line_start":1034,"line_end":1034,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94507,"byte_end":94523,"line_start":1052,"line_end":1052,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97020,"byte_end":97036,"line_start":1126,"line_end":1126,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97794,"byte_end":97810,"line_start":1147,"line_end":1147,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98616,"byte_end":98632,"line_start":1168,"line_end":1168,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100785,"byte_end":100801,"line_start":1223,"line_end":1223,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100987,"byte_end":101003,"line_start":1231,"line_end":1231,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101180,"byte_end":101196,"line_start":1238,"line_end":1238,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101475,"byte_end":101491,"line_start":1248,"line_end":1248,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101692,"byte_end":101708,"line_start":1255,"line_end":1255,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102335,"byte_end":102360,"line_start":1274,"line_end":1274,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102427,"byte_end":102452,"line_start":1278,"line_end":1278,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104336,"byte_end":104361,"line_start":1334,"line_end":1334,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106573,"byte_end":106598,"line_start":1389,"line_end":1389,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107404,"byte_end":107429,"line_start":1411,"line_end":1411,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109010,"byte_end":109035,"line_start":1458,"line_end":1458,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109224,"byte_end":109249,"line_start":1466,"line_end":1466,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109550,"byte_end":109575,"line_start":1477,"line_end":1477,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109783,"byte_end":109808,"line_start":1485,"line_end":1485,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110716,"byte_end":110737,"line_start":1512,"line_end":1512,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110818,"byte_end":110839,"line_start":1513,"line_end":1513,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110930,"byte_end":110951,"line_start":1518,"line_end":1518,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112724,"byte_end":112745,"line_start":1570,"line_end":1570,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113817,"byte_end":113838,"line_start":1593,"line_end":1593,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114007,"byte_end":114028,"line_start":1601,"line_end":1601,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114301,"byte_end":114322,"line_start":1612,"line_end":1612,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114523,"byte_end":114544,"line_start":1620,"line_end":1620,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115452,"byte_end":115474,"line_start":1648,"line_end":1648,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115556,"byte_end":115578,"line_start":1651,"line_end":1651,"column_start":68,"column_end":90},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115669,"byte_end":115691,"line_start":1656,"line_end":1656,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117498,"byte_end":117520,"line_start":1708,"line_end":1708,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118601,"byte_end":118623,"line_start":1731,"line_end":1731,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118796,"byte_end":118818,"line_start":1739,"line_end":1739,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118982,"byte_end":119004,"line_start":1746,"line_end":1746,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":119285,"byte_end":119307,"line_start":1757,"line_end":1757,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":119508,"byte_end":119530,"line_start":1765,"line_end":1765,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\lib.rs","byte_start":3958,"byte_end":3969,"line_start":102,"line_end":102,"column_start":22,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":8},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":7082,"byte_end":7090,"line_start":80,"line_end":80,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":20},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":8244,"byte_end":8252,"line_start":113,"line_end":113,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":20},"to":{"krate":0,"index":30}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9279,"byte_end":9284,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9353,"byte_end":9358,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":9390,"byte_end":9395,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10073,"byte_end":10078,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":10445,"byte_end":10450,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14033,"byte_end":14038,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":14690,"byte_end":14695,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":15896,"byte_end":15901,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":2069}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":16039,"byte_end":16044,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":1997}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":16190,"byte_end":16195,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":16484,"byte_end":16501,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":87},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":17994,"byte_end":18004,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":91},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":18062,"byte_end":18072,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":20454,"byte_end":20464,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22496,"byte_end":22506,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":91},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22690,"byte_end":22700,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":91},"to":{"krate":1,"index":2294}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":22875,"byte_end":22885,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":91},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23136,"byte_end":23146,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":91},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":23342,"byte_end":23352,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":91},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24218,"byte_end":24234,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24315,"byte_end":24331,"line_start":604,"line_end":604,"column_start":67,"column_end":83},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":24421,"byte_end":24437,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":26191,"byte_end":26207,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27229,"byte_end":27245,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27417,"byte_end":27433,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2294}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27596,"byte_end":27612,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":27863,"byte_end":27879,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\mutex.rs","byte_start":28079,"byte_end":28095,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30651,"byte_end":30668,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":229},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30742,"byte_end":30759,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":229},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":30804,"byte_end":30821,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":33214,"byte_end":33231,"line_start":147,"line_end":147,"column_start":39,"column_end":56},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":34537,"byte_end":34554,"line_start":185,"line_end":185,"column_start":40,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35653,"byte_end":35667,"line_start":216,"line_end":216,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35767,"byte_end":35781,"line_start":220,"line_end":220,"column_start":9,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":35833,"byte_end":35847,"line_start":224,"line_end":224,"column_start":38,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":36961,"byte_end":36975,"line_start":262,"line_end":262,"column_start":15,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":37645,"byte_end":37659,"line_start":282,"line_end":282,"column_start":46,"column_end":60},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":41674,"byte_end":41688,"line_start":397,"line_end":397,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":42377,"byte_end":42391,"line_start":415,"line_end":415,"column_start":51,"column_end":65},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43635,"byte_end":43649,"line_start":447,"line_end":447,"column_start":68,"column_end":82},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2069}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":43827,"byte_end":43841,"line_start":454,"line_end":454,"column_start":50,"column_end":64},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":1997}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":44027,"byte_end":44041,"line_start":461,"line_end":461,"column_start":74,"column_end":88},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":44393,"byte_end":44410,"line_start":470,"line_end":470,"column_start":37,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":331},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46058,"byte_end":46077,"line_start":527,"line_end":527,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":46160,"byte_end":46179,"line_start":531,"line_end":531,"column_start":65,"column_end":84},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":48737,"byte_end":48756,"line_start":609,"line_end":609,"column_start":5,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":50851,"byte_end":50870,"line_start":666,"line_end":666,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51080,"byte_end":51099,"line_start":676,"line_end":676,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51389,"byte_end":51408,"line_start":688,"line_end":688,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":51632,"byte_end":51651,"line_start":696,"line_end":696,"column_start":9,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52667,"byte_end":52692,"line_start":724,"line_end":724,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":52779,"byte_end":52804,"line_start":729,"line_end":729,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":54676,"byte_end":54701,"line_start":786,"line_end":786,"column_start":5,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55774,"byte_end":55799,"line_start":811,"line_end":811,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":55995,"byte_end":56020,"line_start":821,"line_end":821,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":56308,"byte_end":56333,"line_start":833,"line_end":833,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\remutex.rs","byte_start":56557,"byte_end":56582,"line_start":841,"line_end":841,"column_start":9,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":60022,"byte_end":60031,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":471}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":61707,"byte_end":61716,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":476}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":62271,"byte_end":62280,"line_start":148,"line_end":148,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":478}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63400,"byte_end":63409,"line_start":175,"line_end":175,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63799,"byte_end":63817,"line_start":184,"line_end":184,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":485},"to":{"krate":0,"index":488}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":63820,"byte_end":63834,"line_start":184,"line_end":184,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":478},"to":{"krate":0,"index":488}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":64602,"byte_end":64611,"line_start":200,"line_end":200,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":491}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65660,"byte_end":65676,"line_start":232,"line_end":232,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":491},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":65679,"byte_end":65692,"line_start":232,"line_end":232,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":471},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66621,"byte_end":66637,"line_start":257,"line_end":257,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":491},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":66640,"byte_end":66658,"line_start":257,"line_end":257,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":476},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67258,"byte_end":67274,"line_start":275,"line_end":275,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":491},"to":{"krate":0,"index":503}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":67277,"byte_end":67291,"line_start":275,"line_end":275,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":478},"to":{"krate":0,"index":503}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":69659,"byte_end":69665,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":508},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":69742,"byte_end":69748,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":508},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":69781,"byte_end":69787,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70519,"byte_end":70525,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":70949,"byte_end":70955,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":76835,"byte_end":76841,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":78180,"byte_end":78186,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":80768,"byte_end":80774,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":82591,"byte_end":82597,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":84180,"byte_end":84186,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":85827,"byte_end":85833,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87265,"byte_end":87271,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":508},"to":{"krate":1,"index":2069}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87412,"byte_end":87418,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":508},"to":{"krate":1,"index":1997}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87567,"byte_end":87573,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":508},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":87863,"byte_end":87880,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":588},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":88542,"byte_end":88557,"line_start":878,"line_end":878,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":91074,"byte_end":91089,"line_start":954,"line_end":954,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93213,"byte_end":93228,"line_start":1009,"line_end":1009,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93410,"byte_end":93425,"line_start":1017,"line_end":1017,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93696,"byte_end":93711,"line_start":1027,"line_end":1027,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":93912,"byte_end":93927,"line_start":1034,"line_end":1034,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":94507,"byte_end":94523,"line_start":1052,"line_end":1052,"column_start":45,"column_end":61},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97020,"byte_end":97036,"line_start":1126,"line_end":1126,"column_start":54,"column_end":70},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":97794,"byte_end":97810,"line_start":1147,"line_end":1147,"column_start":61,"column_end":77},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":98616,"byte_end":98632,"line_start":1168,"line_end":1168,"column_start":49,"column_end":65},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100785,"byte_end":100801,"line_start":1223,"line_end":1223,"column_start":55,"column_end":71},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":100987,"byte_end":101003,"line_start":1231,"line_end":1231,"column_start":58,"column_end":74},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":2294}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101180,"byte_end":101196,"line_start":1238,"line_end":1238,"column_start":54,"column_end":70},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101475,"byte_end":101491,"line_start":1248,"line_end":1248,"column_start":73,"column_end":89},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":101692,"byte_end":101708,"line_start":1255,"line_end":1255,"column_start":9,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102335,"byte_end":102360,"line_start":1274,"line_end":1274,"column_start":9,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":102427,"byte_end":102452,"line_start":1278,"line_end":1278,"column_start":52,"column_end":77},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":104336,"byte_end":104361,"line_start":1334,"line_end":1334,"column_start":56,"column_end":81},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":106573,"byte_end":106598,"line_start":1389,"line_end":1389,"column_start":61,"column_end":86},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":107404,"byte_end":107429,"line_start":1411,"line_end":1411,"column_start":57,"column_end":82},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109010,"byte_end":109035,"line_start":1458,"line_end":1458,"column_start":62,"column_end":87},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109224,"byte_end":109249,"line_start":1466,"line_end":1466,"column_start":61,"column_end":86},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109550,"byte_end":109575,"line_start":1477,"line_end":1477,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":109783,"byte_end":109808,"line_start":1485,"line_end":1485,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110716,"byte_end":110737,"line_start":1512,"line_end":1512,"column_start":68,"column_end":89},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110818,"byte_end":110839,"line_start":1513,"line_end":1513,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":110930,"byte_end":110951,"line_start":1518,"line_end":1518,"column_start":45,"column_end":66},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":112724,"byte_end":112745,"line_start":1570,"line_end":1570,"column_start":49,"column_end":70},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":113817,"byte_end":113838,"line_start":1593,"line_end":1593,"column_start":55,"column_end":76},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114007,"byte_end":114028,"line_start":1601,"line_end":1601,"column_start":54,"column_end":75},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114301,"byte_end":114322,"line_start":1612,"line_end":1612,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":114523,"byte_end":114544,"line_start":1620,"line_end":1620,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":6965}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115452,"byte_end":115474,"line_start":1648,"line_end":1648,"column_start":9,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":2093}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115556,"byte_end":115578,"line_start":1651,"line_end":1651,"column_start":68,"column_end":90},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":2081}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":115669,"byte_end":115691,"line_start":1656,"line_end":1656,"column_start":45,"column_end":67},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":117498,"byte_end":117520,"line_start":1708,"line_end":1708,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118601,"byte_end":118623,"line_start":1731,"line_end":1731,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":2281}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118796,"byte_end":118818,"line_start":1739,"line_end":1739,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":2294}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":118982,"byte_end":119004,"line_start":1746,"line_end":1746,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":2305}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":119285,"byte_end":119307,"line_start":1757,"line_end":1757,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":6960}},{"span":{"file_name":"C:\\Users\\prana\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.4\\src\\rwlock.rs","byte_start":119508,"byte_end":119530,"line_start":1765,"line_end":1765,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":6965}}]}